Certainly! Below is a Python function named `reverse_string` that takes a single string argument and returns the reversed string.

```python
def reverse_string(s):
    """
    Reverses the given string.

    Parameters:
    s (str): The string to be reversed.

    Returns:
    str: The reversed string.
    """
    return s[::-1]
```

### How It Works

- **String Slicing (`s[::-1]`):**
  - The slice syntax `s[start:stop:step]` is used to slice the string.
  - Omitting `start` and `stop` (`s[::-1]`) means it starts from the beginning and goes till the end.
  - The `step` parameter is `-1`, which tells Python to step through the string backwards, effectively reversing it.

### Example Usage

```python
original_string = "Hello, World!"
reversed_string = reverse_string(original_string)
print(reversed_string)  # Output: !dlroW ,olleH
```

### Alternative Methods

While slicing is the most concise and efficient way to reverse a string in Python, here are a couple of alternative methods:

1. **Using the `reversed()` Function and `join`:**

    ```python
    def reverse_string(s):
        return ''.join(reversed(s))
    ```

    - `reversed(s)` returns an iterator that accesses the given string in reverse order.
    - `''.join()` concatenates the characters from the iterator into a new string.

2. **Using a For Loop:**

    ```python
    def reverse_string(s):
        reversed_s = ''
        for char in s:
            reversed_s = char + reversed_s
        return reversed_s
    ```

    - Iterates through each character in the original string.
    - Prepends each character to the `reversed_s` string, effectively reversing the order.

### Choosing the Best Method

- **Slicing (`s[::-1]`):** 
  - **Pros:** Concise, efficient, and Pythonic.
  - **Cons:** May be less intuitive for beginners.

- **`reversed()` and `join`:**
  - **Pros:** More readable for those familiar with built-in functions.
  - **Cons:** Slightly less efficient than slicing.

- **For Loop:**
  - **Pros:** Very clear and easy to understand step-by-step.
  - **Cons:** Least efficient, especially for large strings.

For most use cases, **slicing (`s[::-1]`)** is the recommended approach due to its simplicity and performance.